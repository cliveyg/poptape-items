name: Unit tests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 11 * * 1' # run "At 11:00 on Monday"

jobs:
  # Run code tests before building the image, to ensure it is good to go
  unit-tests:
    name: Run code tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9] # Using a list so it's extensible for future use
    services:
      # label used to access the service container
      mongodb:
        # dockerhub image
        image: mongo
        # provide the login and db deets for mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_TESTDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_TESTDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ secrets.MONGO_TESTDB_NAME }}
        ports:
          # maps tcp port 27017 on service container to the host
          - 27017:27017
        # set health checks to wait until mongo has started
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      - name: Install mongosh
        run: |
          sudo apt-get update
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update && sudo apt-get install -y mongodb-mongosh
          

      - uses: actions/checkout@v4
      - name: Setting up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # have to create an .env file to be able to run unit tests
      - name: Create .env file from github secrets and set PYTHONUNBUFFERED=0 env
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          export PYTHONUNBUFFERED=0
          echo 'db.runCommand("ping").ok' | mongosh --quiet

      # - name: Create DB tables
      #  run: |
      #    pwd
      #    psql -h localhost -U poptape_auth_test password=${{ secrets.TESTDB_PASSWORD }} -f db_schema/poptape_auth_db_schema.sql
      #    psql -h localhost -U poptape_auth_test password=${{ secrets.TESTDB_PASSWORD }} -c '\dt'

      - name: Test with pytest
        run: |
          mkdir -p log
          touch log/poptape_items.log
          coverage run -m --omit="*/test*" pytest -v --junitxml=junit.xml --html=report.html
          coverage xml          
          echo "$(coverage report -m )"
          covRes="$(coverage report -m --fail-under=1)"
          echo "$covRes"

      - name: Create coverage badges
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: 1c36226cfbdf2ae7928d01649ab54fc3
          token: ${{ secrets.GIST_TOKEN }}